:: This class provides convenience methods for reading data from a stream of
:: bytes that presents itself in the form of a byte buffer that extends
:: "to the right" over time (such as data coming from the network),
:: while reading logic follows along and chops off pieces "from the left"
:: side of the byte buffer after they have been successfully read.
::
:: This is distinguished from ByteStream.ChunkedReader, which accepts data
:: in discrete chunks that arrive independently.
::
:: While reading, a "cursor" and a "marker" position are maintained,
:: with the former indicating the fully advanced position in the stream
:: and the latter indicating an earlier position in the stream that can
:: be used as the start of a token for tokenization, as well as for rewind.
:: Once both the cursor and marker have passed by a part of the stream,
:: it is not possible to read those bytes anymore, by design.
:: This allows bytes to pass out of scope and be eventually garbage collected.
::
:: A variety of convenience methods for reading and comparing the bytes of
:: a token are provided, with a token being defined as the sequence of bytes
:: between the marker (marking the start of the token) and the cursor
:: (indicating the end of the token). Once a token has been read, the caller
:: can advance the cursor forward and/or move the marker to the cursor position
:: as needed to continue parsing the stream and set up the next token to read.
::
:: When finished, the reader instance can be cleared to allow garbage collection
:: of the appended data, then it can be used again for the next stream.
:: Alternatively, garbage collection can happen in the midst of an ongoing
:: stream using the compact method to drop only bytes that are behind
:: both the marker and cursor, releasing bytes that cannot be read anymore.
:class ByteStream.Reader
  :is BinaryReadable
  :let _data Bytes'ref
  :var _offset USize: 0
  :var _mark_offset USize: 0
  :var _lost_offset USize: 0

  :new (space USize = 0x4000)
    @_data = Bytes.new(space)

  :: DEPRECATED: Methods like this will soon only be in `ByteStream.Reader.Private`.
  ::
  :: Reset this object back to an empty state so that it can be reused.
  :: All data held and all cursor and mark state will be dropped.
  ::
  :: If the cursor and marker were already at the end of the stream,
  :: there will be no change in visible behavior from the caller side,
  :: but it's still important to call this method to allow garbage collection.
  :fun ref clear
    @_data.clear
    @_offset = 0
    @_mark_offset = 0
    @_lost_offset = 0
    @

  :: DEPRECATED: Methods like this will soon only be in `ByteStream.Reader.Private`.
  ::
  :: Receive some bytes from the given source, extending the end of the stream.
  :: Returns the number of bytes that were received, as reported by the source.
  :: Raises an error if the source has become permanently closed off.
  :fun ref receive_from!(source ByteStream.Source)
    case (
    | @_data.space == 0 | @_data.reserve(0x4000) // TODO: customizable reserve?
    | @_data.space == @_data.size | @_data.reserve(@_data.space + 0x4000)
    )
    source.emit_bytes_into!(@_data)

  :: Move the mark position to match the current cursor position.
  :: This is often used to mark the start of a token in a token stream,
  :: and to set a place to rewind back to in case of an interrupted stream.
  :fun ref mark_here
    @_mark_offset = @_offset
    @

  :: Move the cursor back to match the last marker position.
  :: This is often used to reset the stream to a known place when interrupted,
  :: so that when the next chunk is available it can be resumed from there.
  :fun ref rewind_to_marker
    @_offset = @_mark_offset
    @

  :: Get the number of bytes available in the stream ahead of the cursor.
  :: This the the number of bytes that can be peeked or advanced past.
  :: Attempting to go past that point in the stream will raise an error.
  :fun bytes_ahead: @_data.size - @_offset

  :: Get the number of bytes available in the stream ahead of the marker.
  :: This will always be equal to or greater than those ahead of the cursor.
  :fun bytes_ahead_of_marker: @_data.size - @_mark_offset

  :: Get the space available in the underlying allocation ahead of the cursor.
  :: This is equivalent to the number of available bytes ahead of the cursor
  :: plus the number of further bytes that can be received from a
  :: ByteStream.Source prior to forcing a reallocation of the underlying buffer.
  :fun space_ahead: @_data.space - @_offset

  :: Get the space available in the underlying allocation ahead of the marker.
  :: This is equivalent to the number of available bytes ahead of the marker
  :: plus the number of further bytes that can be received from a
  :: ByteStream.Source prior to forcing a reallocation of the underlying buffer.
  :fun space_ahead_of_marker: @_data.space - @_mark_offset

  :: Get the total number of bytes that the cursor has advanced since the
  :: very start of the byte stream, including bytes no longer held in buffer.
  :fun bytes_behind: @_offset + @_lost_offset

  :: Get the total number of bytes that the marker has advanced since the
  :: very start of the byte stream, including bytes no longer held in buffer.
  :fun bytes_behind_marker: @_mark_offset + @_lost_offset

  :: DEPRECATED: Methods like this will soon only be in `ByteStream.Reader.Private`.
  ::
  :: Ensure that the underlying byte buffer is ready to handle the given amount
  :: of bytes ahead of the current cursor position, without copying on receive.
  :: This includes both bytes already in the buffer and space for future bytes.
  ::
  :: Note that this may trigger a copy of the current content of the buffer
  :: if a reallocation is needed to ensure that number of bytes are available,
  :: but that copy can be avoided if the full buffer is extracted first.
  :fun ref reserve_bytes_ahead(amount USize)
    actual_amount = try (amount +! @_offset | USize.max_value)
    @_data.reserve(actual_amount)
    @

  :: DEPRECATED: Methods like this will soon only be in `ByteStream.Reader.Private`.
  ::
  :: Reserve additional space in the underlying byte buffer, which forces a
  :: reallocation now, but sets a minimum number of bytes that the buffer
  :: can receive beyond the current size without forcing a reallocation.
  ::
  :: See `Bytes.reserve_additional` for more information.
  :fun ref reserve_additional(additional_space)
    @_data.reserve_additional(additional_space)
    @

  :: Get the number of bytes in the currently marked token.
  :: That is, the number of bytes between the marker and the cursor.
  :fun token_byte_size: @_offset - @_mark_offset

  :: Yield each byte in the currently marked token.
  :: That is, the bytes between the marker and the cursor.
  :fun each_token_byte None
    :yields U8 for None
    @each_token_byte_until -> (byte | yield byte, False)
    None

  :: Yield each byte in the currently marked token until the block returns True.
  :: Returns True if the block stopped iteration early by returning True.
  :: Otherwise returns False, indicating that iteration fully completed.
  :fun each_token_byte_until Bool
    :yields U8 for Bool
    @_data.each_until(@_mark_offset, @_offset) -> (byte | yield byte)

  :: For the bytes in the currently marked token, yield each associated chunk,
  :: along with the start and end offset of the chunk that are within the token.
  :: This is used internally for chunk-wise comparison and copying operations.
  :fun _each_token_slice None
    :yields for None // TODO: unify Bytes cap with ByteStream.ChunkedReader signature?
    yield (@_data, @_mark_offset, @_offset)

  :: Same as the each_token_byte function, but allows the yield block to return
  :: True to stop iteration early, and in such a case the function returns True.
  :fun _each_token_slice_until Bool
    :yields for Bool // TODO: unify Bytes cap with ByteStream.ChunkedReader signature?
    yield (@_data, @_mark_offset, @_offset)

  :: Return True if the bytes in the currently marked token are equivalent
  :: to the bytes referenced by the given string.
  :fun is_token_equal_to(other (Bytes'box | String'box))
    @token_byte_size == other.size && (
      other_start USize = 0
      unequal = @_each_token_slice_until -> (chunk, start, end |
        slice_size = end - start

        unequal_slice = chunk
          .is_slice_equal(start, other, other_start, slice_size)
          .not

        other_start += slice_size
        unequal_slice
      )
      unequal.invert
    )

  :: Return True if the bytes in the currently marked token, after lowercasing
  :: any encountered ASCII letters (A-Z) are equivalent to the given string.
  :: That is, the given string should be supplied as already being lowercase.
  :fun is_token_ascii_lowercase_equal_to(other (Bytes'box | String'box))
    @token_byte_size == other.size && (
      index USize = 0
      unequal = @each_token_byte_until -> (byte |
        lower_byte = if byte >= 'A' && byte <= 'Z' (byte - 'A' + 'a' | byte)
        unequal_byte = try (lower_byte != other.byte_at!(index) | True)
        index += 1
        unequal_byte
      )
      unequal.invert
    )

  :: Return the portion of the stream between the marker and the cursor,
  :: as isolated Bytes, advancing the marker past the token so that it may
  :: never be read again, which allows the returned Bytes to avoid a copy.
  :fun ref extract_token Bytes'iso
    extracted = @_data.chop_left(@_offset)
    extracted.truncate_left(@_mark_offset)
    @_lost_offset += @_offset
    @_mark_offset = 0
    @_offset = 0
    --extracted

  :: Advance to the end of the stream, extracting everything after the marker
  :: as isolated Bytes, advancing the marker to the end so that it may
  :: never be read again, which allows the returned Bytes to avoid a copy.
  :fun ref extract_all
    @advance_to_end.extract_token // TODO: more efficient than chop-truncate?

  :: Return the portion of the stream between the marker and the cursor,
  :: as an immutable String.
  :fun token_as_string String
    :: TODO: Don't copy, or at least do a more efficient copy.
    // TODO: explicit variable type should not be needed in this line:
    string String'iso = String.new_iso(@token_byte_size)
    @each_token_byte -> (byte | string.push_byte(byte))
    --string

  :: Return the portion of the stream between the marker and the cursor,
  :: parsed as a positive integer written with sequential decimal digits (0-9).
  :: If other (non-digit) bytes are encountered, an error is raised.
  :fun token_as_positive_integer! U64
    value U64 = 0
    error = False
    @each_token_byte_until -> (byte |
      if byte >= '0' && byte <= '9' (
        value = value * 10 + (byte - '0').u64
        False // continue iterating
      |
        error = True // TODO: should we just raise an error here directly?
        True // stop iteration
      )
    )
    if error error!
    value

  :: Advance the cursor forward to the end of the byte stream.
  :fun ref advance_to_end
    @_offset = @_data.size
    @

  :: Advance the cursor forward in the byte stream by N total bytes.
  :: Raises an error if there are not enough bytes to do so, leaving the cursor
  :: position unchanged in that case.
  :fun ref advance!(n USize)
    offset = @_offset +! n
    if offset <= @_data.size (
      @_offset = offset
    |
      error!
    )
    @

  :: Advance the cursor byte-by-byte for as long as the block yields True,
  :: stopping the cursor pointing at the byte for which it yielded False.
  :: Raises an error if the end of the byte stream is reached prior to that.
  :fun ref advance_while!
    :yields U8 for Bool
    while (yield @_data[@_offset]!) (@_offset += 1)
    @

  :: Read the byte at the offset currently pointed to by the cursor,
  :: and advance the cursor 1 byte forward to point to the next byte.
  :: Raises an error if the end of the byte stream is reached prior to that.
  :fun ref take_byte! U8
    value = @_data.read_byte!(@_offset)
    @_offset += 1
    value

  :: Read a `U16` value at the offset currently pointed to by the cursor,
  :: in native byte order, and advance the cursor past the value.
  :: Raises an error if the end of the byte stream is reached prior to that.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U16.be_to_native` or `U16.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref take_native_u16! U16
    value = @_data.read_native_u16!(@_offset)
    @_offset += U16.byte_width.usize
    value

  :: Read a `U32` value at the offset currently pointed to by the cursor,
  :: in native byte order, and advance the cursor past the value.
  :: Raises an error if the end of the byte stream is reached prior to that.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U32.be_to_native` or `U32.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref take_native_u32! U32
    value = @_data.read_native_u32!(@_offset)
    @_offset += U32.byte_width.usize
    value

  :: Read a `U64` value at the offset currently pointed to by the cursor,
  :: in native byte order, and advance the cursor past the value.
  :: Raises an error if the end of the byte stream is reached prior to that.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U64.be_to_native` or `U64.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref take_native_u64! U64
    value = @_data.read_native_u64!(@_offset)
    @_offset += U64.byte_width.usize
    value

  :: Read a byte from N bytes ahead of the cursor, without moving the cursor.
  :: Raises an error if there are not enough bytes ahead to do so.
  :fun peek_byte!(n USize = 0) U8
    @_data[@_offset +! n]!

  :: Read a `U16` from N bytes ahead of the cursor, without moving the cursor.
  :: Raises an error if there are not enough bytes ahead to do so.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U16.be_to_native` or `U16.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref peek_native_u16!(n USize = 0) U16
    @_data.read_native_u16!(@_offset +! n)

  :: Read a `U32` from N bytes ahead of the cursor, without moving the cursor.
  :: Raises an error if there are not enough bytes ahead to do so.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U32.be_to_native` or `U32.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref peek_native_u32!(n USize = 0) U32
    @_data.read_native_u32!(@_offset +! n)

  :: Read a `U64` from N bytes ahead of the cursor, without moving the cursor.
  :: Raises an error if there are not enough bytes ahead to do so.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U64.be_to_native` or `U64.le_to_native` methods to convert the value
  :: from its protocol-defined byte order to the native byte order.
  :fun ref peek_native_u64!(n USize = 0) U64
    @_data.read_native_u64!(@_offset +! n)

  :: DEPRECATED: use `take_byte!` or `peek_byte!` instead
  :fun read_byte!(offset USize) U8
    @_data.read_byte!(@_mark_offset +! offset)

  :: DEPRECATED: use `take_native_u16!` or `peek_native_u16!` instead
  :fun read_native_u16!(offset USize) U16
    @_data.read_native_u16!(@_mark_offset +! offset)

  :: DEPRECATED: use `take_native_u32!` or `peek_native_u32!` instead
  :fun read_native_u32!(offset USize) U32
    @_data.read_native_u32!(@_mark_offset +! offset)

  :: DEPRECATED: use `take_native_u64!` or `peek_native_u64!` instead
  :fun read_native_u64!(offset USize) U64
    @_data.read_native_u64!(@_mark_offset +! offset)

:: This exposes extra features for `ByteStream.Reader` related to writing bytes
:: into the buffer, to be read later by readers of the `ByteStream.Reader`.
::
:: It is named `ByteStream.Reader.Private` because the "owner" of the stream
:: will typically want to keep it privately to prevent readers of the stream
:: from being able to write into it, or otherwise tamper with the buffers.
::
:: Some FFI-oriented ways of filling the buffer will rely on the privateness
:: of this in their strategy for memory safety. For example, Windows IOCP
:: has a somewhat awkward flow where it takes a pointer to the end of the buffer
:: and asynchronously writes bytes into it, then tells us how many later.
:: A flow like this must critically keep would-be tamperers from being able
:: to invalidate the buffer pointer, or that part of the buffer at all.
:: So to keep this kind of workflow safe, all methods that could potentially
:: cause the `ByteStream.Reader` to reallocate its buffer or write into it are
:: kept in this private view, which can be withheld from would-be tamperers.
:struct ByteStream.Reader.Private
  :let public ByteStream.Reader

  :new (space USize = 0x4000)
    @public = ByteStream.Reader.new(space)

  :: DEPRECATED: Use `new` instead.
  :new _new_deprecated(@public)

  :: Append the given `bytes` into the underlying buffer.
  ::
  :: The bytes will become immediately available for stream readers to read.
  :fun ref "<<"(bytes Bytes)
    @public._data << bytes
    @

  :: Reserve a specific amount of space for writing new bytes into the buffer.
  ::
  :: The buffer will not grow (or shrink) if the amount of space available
  :: for writing already meets or exceeds the given requested amount.
  ::
  :: This may result in a copy operation, if the buffer needs to grow and if
  :: the buffer contains some data not yet extracted away by stream readers.
  ::
  :: However, judicious use of this method is the right way to avoid copy
  :: operations and re-allocations later, by reserving "up front" enough buffer
  :: to hold the expected amount of incoming data in the next "batch" before
  :: stream readers will drain the buffer of its content again.
  :: This is most applicable to framed byte stream protocols wherein it is
  :: possible to know ahead of time how much buffer will be needed for content.
  :fun ref reserve_additional(space_for_writing)
    data = @public._data
    data.reserve(data.size.saturating_add(space_for_writing))
    @

  :: Reserve a reasonably-sized buffer for writing directly into from FFI code,
  :: then return the pointer and the amount of space available for writing.
  ::
  :: We guarantee here for the caller's peace of mind that the amount of
  :: space available for writing will never be zero.
  ::
  :: The expected workflow after this method is to write the bytes as needed,
  :: then call `add_to_size_possibly_including_uninitialized_memory`
  :: to expose those newly written bytes to readers of the stream.
  :fun ref prepare_cpointer_for_writing Pair(CPointer(U8), USize)
    data = @public._data

    if data.space == data.size (
      data.reserve(data.space.saturating_add(0x4000))
    )

    Pair(CPointer(U8), USize).new(
      data.cpointer(data.size)
      data.space - data.size
    )

  :: Call this method to indicate that some bytes have been written
  :: into the underlying data buffer via some FFI code.
  :: The bytes will become exposed to the readers of the stream.
  ::
  :: This usually happens after a call to `prepare_cpointer_for_writing`,
  :: and after that C pointer has been written to via some FFI call.
  ::
  :: This is safe in that it will truncate the maximum size to be
  :: no larger than the space in the currently allocated buffer.
  :: However, it may expose bytes that haven't been initialized yet,
  :: if this method is used in a situation where those bytes haven't
  :: actually been initialized by FFI. In such a situation, you'd see
  :: undefined byte values, but there would be no memory unsafety.
  :fun ref add_to_size_possibly_including_uninitialized_memory(
    added_bytes USize
  )
    @public._data.resize_possibly_including_uninitialized_memory(
      @public._data.size.saturating_add(added_bytes)
    )
    @