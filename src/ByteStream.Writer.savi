:: This class provides a way to buffer writes to a data sink, in the form of
:: chunks that arrive one at a time, then get flushed all together to the sink.
::
:: This batched writing pattern amortizes the cost of writing to the sink.
:: but its up to the caller to determine when to `flush`, based on whatever
:: performance tuning and/or heuristics deemed appropriate for the application.
:class ByteStream.Writer
  :is ByteStream.Writable

  :let _target ByteStream.Sink
  :var _current_chunk: Bytes.new_iso
  :new (@_target)

  :: DEPRECATED: Use `ByteStream.Pair.new` to create a reader and writer pair.
  :new to_reader(reader ByteStream.Reader)
    @_target = ByteStream.Sink.ToReader.new(
      ByteStream.Reader.Private._new_deprecated(reader)
    )

  :new to_actor(actor ByteStream.Sink.Actor)
    @_target = ByteStream.Sink.ToActor.new(actor)

  :: Add a chunk of bytes to the stream.
  ::
  :: It won't actually get written until the `flush` method is called.
  :fun ref "<<"(chunk Bytes'val)
    if (chunk.size <= 64) (
      // If the chunk fits on a 64-bit cache line, we consider it more cheap to
      // copy it into the current chunk than to save it as a separate chunk.
      @_current_chunk << chunk
    |
      // Otherwise, we close out the current chunk and then write the new chunk.
      @_finish_current_chunk
      @_target.write_bytes(chunk)
    )
    @

  :: Add a single byte to the stream.
  ::
  :: It won't actually get written until the `flush` method is called.
  :fun ref push(byte U8)
    @_current_chunk.push(byte)
    @

  :: Write a `U16` value as bytes to the stream, in native byte order.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U16.native_to_be` or `U16.native_to_le` methods to convert the value
  :: from its native byte order to the specified byte order first.
  :fun ref push_native_u16(value): @_current_chunk.push_native_u16(value)

  :: Write a `U32` value as bytes to the stream, in native byte order.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U32.native_to_be` or `U32.native_to_le` methods to convert the value
  :: from its native byte order to the specified byte order first.
  :fun ref push_native_u32(value): @_current_chunk.push_native_u32(value)

  :: Write a `U64` value as bytes to the stream, in native byte order.
  ::
  :: For protocols using a platform-independent byte order, leverage the
  :: `U64.native_to_be` or `U64.native_to_le` methods to convert the value
  :: from its native byte order to the specified byte order first.
  :fun ref push_native_u64(value): @_current_chunk.push_native_u64(value)

  :: Try to write all data that is currently buffered to the target sink.
  ::
  :: Raises an error if there is still some data buffered that could not yet be
  :: flushed, either because the underlying sink was not in a writable state,
  :: or because it wasn't prepared to accept the full amount yet.
  ::
  :: However, note that even if an error is raised, there may have been some
  :: amount of successful data transfer already - all that is known is that
  :: some amount of data still remains in the internal buffer to be transferred.
  :fun ref flush! @
    @_finish_current_chunk
    @_target.write_flush!
    @

  :fun ref _finish_current_chunk
    if @_current_chunk.is_not_empty @_target.write_bytes(
      // Pass along the chunk and allocate a new "current chunk" with the
      // same amount of space as old "current chunk", making the assumption
      // that the typical amount written per chunk will be fairly stable,
      // but without us knowing what that typical amount is ahead of time.
      // TODO: Should this behavior be configurable?
      @_current_chunk <<= Bytes.new_iso(@_current_chunk.space)
    )
    @
