:: This trait is meant to create a common interface that can receive chunks
:: from a `ByteStream.Writer`.
:trait ByteStream.Sink
  :: Add a chunk of bytes to the buffer.
  ::
  :: The bytes are not guaranteed to actually be written until the next call
  :: to the `write_flush!` method, though some implementations may choose to
  :: silently flush more proactively (or even on every chunk) as they see fit.
  :fun ref write_bytes(bytes Bytes'val) @

  :: Try to write all buffered data.
  ::
  :: Raises an error if there is still some data buffered that could not yet be
  :: flushed, either because the underlying sink was not in a writable state,
  :: or because it wasn't prepared to accept the full amount yet.
  ::
  :: However, note that even if an error is raised, there may have been some
  :: amount of successful data transfer already - all that is known is that
  :: some amount of data still remains in the internal buffer to be transferred.
  :fun ref write_flush! @

:: This class is an implementation of `ByteStream.Sink` which emits into
:: a given `ByteStream.Reader`, acting as the `ByteStream.Source` for it.
:: This is often useful for testing protocol reading and writing in test suites.
::
:: The `write_bytes` call writes to a local chunk buffer, which gets flushed
:: into the `ByteStream.Reader` when the `write_flush!` method is called.
::
:: Note that this approach will incur costs for copying the chunks, because the
:: underlying data model of `ByteStream.Reader` is a single contiguous buffer.
:: Given that testing is the primary use case for synchronously connecting a
:: `ByteStream.Writer` to a `ByteStream.Reader`, this copying cost is
:: considered mostly unimportant.
:class ByteStream.Sink.ToReader
  :is ByteStream.Sink
  :is ByteStream.Source

  :let reader ByteStream.Reader
  :let _chunks Array(Bytes): []
  :var _total_size USize: 0
  :new (@reader)

  :fun ref write_bytes(bytes Bytes'val)
    @_chunks << bytes
    @_total_size += bytes.size
    @

  :fun ref write_flush!
    @reader.reserve_additional(@_total_size)
    @reader.receive_from!(@)
    @

  :fun ref emit_bytes_into!(buffer Bytes'ref) USize
    @_chunks.each -> (chunk | buffer << chunk)
    bytes_read = @_total_size

    @_chunks.clear
    @_total_size = 0

    bytes_read

:: This trait is an alternative to `ByteStream.Sink`, used when the sink is
:: an actor that receives the bytes asynchronously instead of synchronously.
:trait tag ByteStream.Sink.Actor
  :: Write multiple chunks of bytes as a batch.
  :be write_chunks(bytes Array(Bytes)'val)

:: This class is an implementation of `ByteStream.Sink` which emits into a
:: given `ByteStream.Sink.Actor`, calling `write_chunks` on each `write_flush!`.
:class ByteStream.Sink.ToActor
  :is ByteStream.Sink

  :var _chunks Array(Bytes)'iso: []
  :let actor ByteStream.Sink.Actor
  :new (@actor)

  :fun ref write_bytes(bytes Bytes'val)
    @_chunks << bytes
    @

  :fun ref write_flush!
    if @_chunks.is_not_empty @actor.write_chunks(@_chunks <<= [])
    @
